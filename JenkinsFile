pipeline {
    agent any

    environment {
        IMAGE_NAME = 'odedpsiphas/world-of-games:latest'
        CONTAINER_NAME = 'world-of-games-test-container'
        TEST_PORT = '8777'
    }

    stages {

        stage('Checkout') {
            steps {
                echo 'Checking out code...'
                checkout scm
            }
        }

        stage('Build') {
            steps {
                echo 'Building Docker image...'
                script {
                    sh "docker build -t ${IMAGE_NAME} ."
                }
            }
        }

        stage('Run') {
            steps {
                echo 'Running Docker container on port 8777 with mounted dummy Scores.txt...'
                script {
                    // Create a fake Scores.txt for testing
                    writeFile file: 'dummy_scores.txt', text: '500'

                    // Run container with mounted Scores.txt and port 8777 exposed
                    sh """
                        docker run -d --rm \
                        --name ${CONTAINER_NAME} \
                        -p ${TEST_PORT}:5000 \
                        -v \$PWD/dummy_scores.txt:/Scores.txt \
                        ${IMAGE_NAME}
                    """

                    // Give the server a few seconds to boot
                    sleep 5
                }
            }
        }

        stage('Test') {
            steps {
                echo 'Running Selenium E2E tests...'
                script {
                    // Run the test against the running container
                    def result = sh(script: "python3 e2e.py http://localhost:${TEST_PORT}", returnStatus: true)

                    if (result != 0) {
                        error("E2E test failed. Aborting pipeline.")
                    } else {
                        echo "E2E test passed."
                    }
                }
            }
        }

        stage('Finalize') {
            steps {
                echo 'Stopping container and pushing image to Docker Hub...'
                script {
                    sh "docker stop ${CONTAINER_NAME} || true"

                    // Log in and push the image
                    withCredentials([usernamePassword(credentialsId: 'dockerhub-creds', usernameVariable: 'DOCKER_USER', passwordVariable: 'DOCKER_PASS')]) {
                        sh """
                            echo \$DOCKER_PASS | docker login -u \$DOCKER_USER --password-stdin
                            docker push ${IMAGE_NAME}
                        """
                    }
                }
            }
        }
    }

    post {
        always {
            echo 'Cleaning up...'
            sh "docker stop ${CONTAINER_NAME} || true"
        }
    }
}
